install_github("biodyn","laurieKell")
library(devtools)
install_github("biodyn","laurieKell")
install_github("biodyn","laurieKell")
library(doParallel)
library(foreach)
library(aspic)
library(gam)
cl=makeCluster(4)
registerDoParallel(cl)
dirData="/home/laurie/Desktop/ICCAT/SCRS/kobe/Inputs/albs/2011/aspic"
runs =c("run2","run6","run7","run8")
files=c(paste(dirData,runs,"aspic.inp",sep="/"))
albs       =aspics(files)
names(albs)=runs
iter=iterators:::iter
albs       =fit(albs)
rm(iter)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
iter=iterators:::iter
albs       =fit(albs)
rm(iter)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
runExe=function(object,package="aspic",exeNm=package,dir=tempdir(),jk=FALSE){
object@index=object@index[object@index$year %in% range(object)["minyear"]:range(object)["maxyear"],]
if (any(is.na(object@catch))){
tmp=ddply(object@index, .(year), with, sum(catch,na.rm=TRUE))
object@catch=as.FLQuant(tmp[,"V1"], dimnames=list(year=tmp[,"year"]))
dmns=dimnames(object@catch)
dmns$year=c(dmns$year,as.numeric(max(dmns$year))+1)
object@stock=FLQuant(NA,dimnames=dmns)
}
#oldwd =setExe(exeNm,package,dir)
oldwd=getwd()
setwd(dir)
runExe("aspic")
## Jack knife if wished
j=1
if (jk){
object=propagate(object,length(jkIdx(object@index)))
object@params=propagate(object@params,length(jkIdx(object@index)))
j   = jkIdx(object@index)
index=object@index}
us=paste("u",seq(length(dimnames(params(object))$params[grep("q",dimnames(params(object))$params)])),sep="")
object@ll=FLPar(NA,params=us,iter=seq(1))
object=chkIters(object)
for (i in seq(dims(object)$iter)){
m_ply(c("prn","rdat","bio","inp","fit","sum","rdatb","det","sum","bot"), function(x)
if (file.exists(paste(exeNm,".",x,sep=""))) system(paste("rm ",exeNm,".",x,sep="")))
if (jk){
object@index=index
object@index[j[i],"index"]=NA
}
# create exe input files
.writeAspicInp(iter(object,i),what="FIT",niter=1,fl=paste(exeNm,".inp",sep=""))
# run
#system(paste("./", exeNm, paste(" ",exeNm,".inp",sep=""),sep=""))
system(paste(exeNm, paste(" ",exeNm,".inp",sep=""),sep=""))
rdat=dget(paste(exeNm,"rdat",sep="."))
#rdat$estimates
object@params[c("b0","msy","k"),i]=rdat$estimates[c("B1.K","MSY","K")]
object@params[4:dim(object@params)[1],i]=rdat$estimates[8+seq(length(names(rdat$estimates))-length(rdat$estimates)+1)]
names(rdat$t.series)=tolower(names(rdat$t.series))
iter(object@stock,i)=as.FLQuant(transform(rdat$t.series[,c("year","b")],data=b)[c("year","data")])[,dimnames(object@stock)$year]
if (.Platform$OS!="windows"){
try(object@objFn[2,i]<-rdat$diagnostics$obj.fn.value)
#try(object@objFn[1,i]<-rdat$diagnostics$rsquare)
rtn=try(readAspic(paste(exeNm,"prn",sep=".")))
if (is.data.frame(rtn)) object@diags=rtn
object@diags=transform(object@diags,stock.  =  hat/c(object@params[grep("q",dimnames(params(object))$params)])[name],
stockHat=index/c(object@params[grep("q",dimnames(params(object))$params)])[name])
object@diags=merge(object@diags,model.frame(mcf(FLQuants(stock=object@stock,harvest=harvest(object))),drop=TRUE),all=T)
object@diags$stock=object@diags$stock.
object@diags=object@diags[,-10]
} else {
rtn=try(readAspic(paste(exeNm,"prn",sep=".")))
if (is.data.frame(rtn)) object@diags=rtn
object@diags=transform(object@diags,stock.  =  hat/c(object@params[grep("q",dimnames(params(object))$params)])[name],
stockHat=index/c(object@params[grep("q",dimnames(params(object))$params)])[name])
object@diags=merge(object@diags,model.frame(mcf(FLQuants(stock=object@stock,harvest=harvest(object))),drop=TRUE),all=T)
object@diags$stock=object@diags$stock.
object@diags=object@diags[,-10]
try(object@objFn[2,i]<-sum(diags(object)$residual^2,na.rm=T))
}
try(object@ll[,i]<-daply(object@diags, .(name), with, biodyn:::calcLogLik(residual[!is.na(residual)]))) #sum(residual^2,na.rm=T)/sum(count(!is.na(residual)))))
}
if (dims(object)$iter!=1) object@diags=data.frame(NULL)
setwd(oldwd)
return(object)}
iter=iterators:::iter
albs       =fit(albs)
rm(iter)
runExe
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
iter=iterators:::iter
albs       =fit(albs)
rm(iter)
class(albs)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
iter=iterators:::iter
albs       =fit(albs)
rm(iter)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
iter=iterators:::iter
albs       =fit(albs)
rm(iter)
iter=iterators:::iter
albs       =fit(albs)
rm(iter)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
iter=iterators:::iter
albs       =fit(albs)
rm(iter)
albs[[1]]       =fit(albs[[1]])
class(albs[[1]])
albs[[1]]       =fit(albs[[1]])
t.=runExe(albs[[1]])
runExe
class(albs[[1]])
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =aspics(files)
names(albs)=runs
iter=iterators:::iter
albs       =fit(albs)
albs       =fit(albs[[1]])
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs[[1]])
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs[[1]])
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs[[1]])
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs[[1]])
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs[[1]])
print(2)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
print(2)
albs       =fit(albs[[1]])
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs[[1]])
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs[[1]])
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs[[1]])
source('~/Desktop/flr/git/aspic/R/aspic-io.R', echo=TRUE)
albs       =fit(albs[[1]])
albs       =fit(albs)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs)
source('~/Desktop/flr/git/biodyn/R/biodyn-pella.R', echo=TRUE)
source('~/Desktop/flr/git/aspic/R/aspic-io.R', echo=TRUE)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
albs       =fit(albs)
library(doParallel)
library(foreach)
library(aspic)
library(gam)
## set parallel stuff
cl=makeCluster(4)
registerDoParallel(cl)
dirData="/home/laurie/Desktop/ICCAT/SCRS/kobe/Inputs/albs/2011/aspic"
runs =c("run2","run6","run7","run8")
files=c(paste(dirData,runs,"aspic.inp",sep="/"))
albs       =aspics(files)
names(albs)=runs
iter=iterators:::iter
albs       =fit(albs)
rm(iter)
runExe
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
iter=iterators:::iter
albs       =fit(albs)
rm(iter)
class(albs)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
class(albs)
iter=iterators:::iter
albs       =fit(albs)
rm(iter)
library(doParallel)
library(foreach)
library(aspic)
library(gam)
## set parallel stuff
cl=makeCluster(4)
registerDoParallel(cl)
dirData="/home/laurie/Desktop/ICCAT/SCRS/kobe/Inputs/albs/2011/aspic"
dirData="http://www.iccat.int/stocka/Models/ASPIC/albs/2011"
runs =c("run2","run6","run7","run8")
files=c(paste(dirData,runs,"aspic.inp",sep="/"))
albs       =aspics(files)
names(albs)=runs
dirData="/home/laurie/Desktop/ICCAT/SCRS/kobe/Inputs/albs/2011/aspic"
runs =c("run2","run6","run7","run8")
files=c(paste(dirData,runs,"aspic.inp",sep="/"))
albs       =aspics(files)
names(albs)=runs
iter=iterators:::iter
albs       =fit(albs)
source('~/Desktop/flr/git/aspic/R/aspic-exe.R', echo=TRUE)
iter=iterators:::iter
albs       =fit(albs)
